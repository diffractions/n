package ga;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

//import org.apache.commons.logging.Log;
//import org.apache.commons.logging.impl.Log4JLogger;
//import org.apache.log4j.Logger;

public class InitGA {

	final static double[][] k = new double[][] {

//	new double[] { 0.3728, 0.07657, 1.49851, 795 },
//			new double[] { 0.37282, 0.07654, 1.49837, 795 },
//			new double[] { 0.37269, 0.07671, 1.4991, 794 },
//			new double[] { 0.37277, 0.07661, 1.49866, 794 },
//			new double[] { 0.37271, 0.07668, 1.49896, 794 },
//			new double[] { 0.37274, 0.07664, 1.49881, 794 },
//			new double[] { 0.37263, 0.07678, 1.4994, 793 },
//			new double[] { 0.37266, 0.07675, 1.49925, 793 },
//			new double[] { 0.37261, 0.07682, 1.49955, 793 },
//			new double[] { 0.37258, 0.07685, 1.49969, 793 },
//			new double[] { 0.3725, 0.07696, 1.50014, 792 },
//			new double[] { 0.37248, 0.07699, 1.50028, 792 },
//			new double[] { 0.37253, 0.07692, 1.49999, 792 },
//			new double[] { 0.37256, 0.07689, 1.49984, 792 },
//			new double[] { 0.37238, 0.07713, 1.50087, 791 },
//			new double[] { 0.37243, 0.07706, 1.50058, 791 },
//			new double[] { 0.37245, 0.07702, 1.50043, 791 },
//			new double[] { 0.3724, 0.07709, 1.50073, 791 },
//			new double[] { 0.37235, 0.07716, 1.50102, 790 },
//			new double[] { 0.36871, 0.0854, 1.53551, 731 },
//			new double[] { 0.3687, 0.08544, 1.53566, 730 },
//			new double[] { 0.36869, 0.08548, 1.53581, 730 },
//			new double[] { 0.36867, 0.08555, 1.53612, 730 },
//			new double[] { 0.36868, 0.08552, 1.53597, 730 },
//			new double[] { 0.36864, 0.08566, 1.53658, 729 },
//			new double[] { 0.36866, 0.08559, 1.53628, 729 },
//			new double[] { 0.36863, 0.0857, 1.53674, 729 },
//			new double[] { 0.36865, 0.08563, 1.53643, 729 },
//			new double[] { 0.36861, 0.08577, 1.53705, 728 },
//			new double[] { 0.3686, 0.08581, 1.5372, 728 },
//			new double[] { 0.36862, 0.08574, 1.53689, 728 },
//			new double[] { 0.36858, 0.08585, 1.53735, 728 },
//			new double[] { 0.36855, 0.08596, 1.53782, 727 },
//			new double[] { 0.36856, 0.08592, 1.53766, 727 },
//			new double[] { 0.36854, 0.086, 1.53797, 727 },
//			new double[] { 0.36857, 0.08589, 1.53751, 727 },
//			new double[] { 0.36853, 0.08604, 1.53813, 726 },
//			new double[] { 0.36851, 0.08611, 1.53843, 726 },
//			new double[] { 0.36852, 0.08607, 1.53828, 726 },
//			new double[] { 0.36849, 0.08618, 1.53874, 725 },
//			new double[] { 0.3685, 0.08615, 1.53859, 725 },
//			new double[] { 0.36572, 0.09348, 1.56881, 675 },
//			new double[] { 0.3657, 0.09352, 1.56898, 675 },
//			new double[] { 0.36574, 0.09344, 1.56864, 675 },
//			new double[] { 0.36568, 0.09356, 1.56914, 674 },
//			new double[] { 0.36565, 0.0936, 1.56931, 674 },
//			new double[] { 0.36563, 0.09364, 1.56948, 674 },
//			new double[] { 0.36561, 0.09368, 1.56964, 674 },
//			new double[] { 0.36559, 0.09372, 1.56981, 673 },
//			new double[] { 0.36556, 0.09376, 1.56998, 673 },
//			new double[] { 0.36554, 0.0938, 1.57014, 673 },
//			new double[] { 0.36552, 0.09384, 1.57031, 673 },
//			new double[] { 0.36549, 0.09389, 1.57048, 672 },
//			new double[] { 0.36547, 0.09393, 1.57064, 672 },
//			new double[] { 0.36545, 0.09397, 1.57081, 672 },
//			new double[] { 0.36542, 0.09401, 1.57098, 671 },
//			new double[] { 0.3654, 0.09405, 1.57114, 671 },
//			new double[] { 0.36538, 0.09409, 1.57131, 671 },
//			new double[] { 0.36535, 0.09413, 1.57148, 671 },
//			new double[] { 0.36533, 0.09417, 1.57165, 670 },
//			new double[] { 0.35952, 0.10068, 1.59819, 627 },
//			new double[] { 0.35942, 0.10076, 1.59852, 627 },
//			new double[] { 0.35936, 0.1008, 1.59869, 627 },
//			new double[] { 0.35947, 0.10072, 1.59836, 627 },
//			new double[] { 0.35926, 0.10088, 1.59902, 626 },
//			new double[] { 0.3592, 0.10092, 1.59919, 626 },
//			new double[] { 0.35931, 0.10084, 1.59886, 626 },
//			new double[] { 0.35909, 0.10101, 1.59952, 625 },
//			new double[] { 0.35915, 0.10096, 1.59935, 625 },
//			new double[] { 0.35904, 0.10105, 1.59969, 625 },
//			new double[] { 0.35899, 0.10109, 1.59985, 625 },
//			new double[] { 0.35887, 0.10117, 1.60018, 624 },
//			new double[] { 0.35882, 0.10121, 1.60035, 624 },
//			new double[] { 0.35876, 0.10125, 1.60051, 624 },
//			new double[] { 0.35893, 0.10113, 1.60002, 624 },
//			new double[] { 0.35865, 0.10133, 1.60085, 623 },
//			new double[] { 0.35859, 0.10137, 1.60101, 623 },
//			new double[] { 0.35871, 0.10129, 1.60068, 623 },
//			new double[] { 0.35854, 0.10141, 1.60118, 622 },
			new double[] { 0.34823, 0.10655, 1.62197, 585 },
//			new double[] { 0.33358, 0.11034, 1.63728, 552 },
//			new double[] { 0.33343, 0.11037, 1.6374, 552 },
//			new double[] { 0.33312, 0.11043, 1.63766, 551 },
//			new double[] { 0.33296, 0.11046, 1.63778, 551 },
//			new double[] { 0.3328, 0.11049, 1.63791, 551 },
//			new double[] { 0.33327, 0.1104, 1.63753, 551 },
//			new double[] { 0.33264, 0.11053, 1.63803, 550 },
//			new double[] { 0.33249, 0.11056, 1.63816, 550 },
//			new double[] { 0.33233, 0.11059, 1.63828, 550 },
//			new double[] { 0.33217, 0.11062, 1.63841, 549 },
//			new double[] { 0.33168, 0.11071, 1.63878, 549 },
//			new double[] { 0.33185, 0.11068, 1.63866, 549 },
//			new double[] { 0.33201, 0.11065, 1.63853, 549 },
//			new double[] { 0.33152, 0.11074, 1.63891, 548 },
//			new double[] { 0.33136, 0.11077, 1.63903, 548 },
//			new double[] { 0.31369, 0.11374, 1.65096, 521 },
//			new double[] { 0.31348, 0.11377, 1.6511, 521 },
//			new double[] { 0.31326, 0.1138, 1.65123, 520 },
//			new double[] { 0.31305, 0.11384, 1.65136, 520 },
//			new double[] { 0.31284, 0.11387, 1.65149, 520 },
//			new double[] { 0.31197, 0.114, 1.65202, 519 },
//			new double[] { 0.31241, 0.11394, 1.65176, 519 },
//			new double[] { 0.31262, 0.1139, 1.65162, 519 },
//			new double[] { 0.31219, 0.11397, 1.65189, 519 },
//			new double[] { 0.31176, 0.11403, 1.65215, 518 },
//			new double[] { 0.31154, 0.11407, 1.65229, 518 },
//			new double[] { 0.31132, 0.1141, 1.65242, 518 },
//			new double[] { 0.3111, 0.11413, 1.65255, 517 },
//			new double[] { 0.31088, 0.11417, 1.65269, 517 },
//			new double[] { 0.29097, 0.11739, 1.66565, 493 },
//			new double[] { 0.29149, 0.1173, 1.66527, 493 },
//			new double[] { 0.29123, 0.11735, 1.66546, 493 },
//			new double[] { 0.29071, 0.11744, 1.66584, 493 },
//			new double[] { 0.29019, 0.11754, 1.66623, 492 },
//			new double[] { 0.29045, 0.11749, 1.66604, 492 },
//			new double[] { 0.28993, 0.11759, 1.66643, 492 },
//			new double[] { 0.28967, 0.11764, 1.66662, 491 },
//			new double[] { 0.2894, 0.11769, 1.66682, 491 },
//			new double[] { 0.27027, 0.12222, 1.68501, 470 },
//			new double[] { 0.27001, 0.1223, 1.68533, 470 },
//			new double[] { 0.26975, 0.12238, 1.68565, 469 },
//			new double[] { 0.26924, 0.12254, 1.68629, 469 },
//			new double[] { 0.2695, 0.12246, 1.68597, 469 },
//			new double[] { 0.26847, 0.12279, 1.68728, 468 },
//			new double[] { 0.26821, 0.12287, 1.68761, 468 },
//			new double[] { 0.26898, 0.12262, 1.68662, 468 },
//			new double[] { 0.26872, 0.1227, 1.68695, 468 },
//			new double[] { 0.26796, 0.12295, 1.68795, 467 },
//			new double[] { 0.25315, 0.12913, 1.71265, 448 },
//			new double[] { 0.24384, 0.13487, 1.73563, 431 },
//			new double[] { 0.2437, 0.13496, 1.736, 430 },
//			new double[] { 0.24343, 0.13515, 1.73674, 430 },
//			new double[] { 0.24357, 0.13505, 1.73637, 430 },
//			new double[] { 0.24329, 0.13524, 1.7371, 429 },
//			new double[] { 0.24315, 0.13533, 1.73747, 429 },
//			new double[] { 0.24302, 0.13542, 1.73783, 429 },
//			new double[] { 0.24288, 0.13551, 1.73819, 429 },
//			new double[] { 0.24274, 0.1356, 1.73855, 428 },
//			new double[] { 0.24261, 0.13569, 1.73891, 428 },
//			new double[] { 0.24247, 0.13578, 1.73927, 428 },
//			new double[] { 0.24234, 0.13587, 1.73962, 427 },
//			new double[] { 0.2422, 0.13596, 1.73997, 427 },
//			new double[] { 0.23557, 0.1397, 1.75496, 413 },
//			new double[] { 0.23543, 0.13977, 1.75523, 412 },
//			new double[] { 0.23528, 0.13984, 1.7555, 412 },
//			new double[] { 0.23513, 0.1399, 1.75577, 412 },
//			new double[] { 0.23497, 0.13997, 1.75603, 411 },
//			new double[] { 0.23482, 0.14003, 1.75629, 411 },
//			new double[] { 0.22754, 0.14244, 1.76592, 398 },
//			new double[] { 0.22737, 0.14248, 1.7661, 397 },
//			new double[] { 0.2272, 0.14253, 1.76627, 397 },
//			new double[] { 0.22703, 0.14257, 1.76644, 397 },
//			new double[] { 0.22686, 0.14261, 1.76661, 396 },
//			new double[] { 0.22635, 0.14273, 1.7671, 396 },
//			new double[] { 0.22652, 0.14269, 1.76694, 396 },
//			new double[] { 0.22669, 0.14265, 1.76677, 396 },
//			new double[] { 0.22618, 0.14277, 1.76726, 395 },
//			new double[] { 0.22584, 0.14285, 1.76757, 395 },
//			new double[] { 0.22601, 0.14281, 1.76741, 395 },
//			new double[] { 0.21974, 0.14553, 1.77831, 383 },
//			new double[] { 0.2196, 0.14567, 1.77885, 382 },
//			new double[] { 0.21947, 0.14581, 1.77941, 382 },
//			new double[] { 0.21933, 0.14595, 1.78, 382 },
//			new double[] { 0.2192, 0.14611, 1.7806, 382 },
//			new double[] { 0.21907, 0.14626, 1.78123, 381 },
//			new double[] { 0.21894, 0.14643, 1.78188, 381 },
//			new double[] { 0.21881, 0.14659, 1.78256, 381 },
//			new double[] { 0.21856, 0.14695, 1.78398, 380 },
//			new double[] { 0.21868, 0.14677, 1.78326, 380 },
			new double[] { 0.215, 0.15724, 1.82529, 371 },
			new double[] { 0.21491, 0.1577, 1.82716, 370 },
//			new double[] { 0.21369, 0.1651, 1.85697, 365 },
//			new double[] { 0.21361, 0.16568, 1.85935, 365 },
//			new double[] { 0.21352, 0.16628, 1.86175, 365 },
//			new double[] { 0.21344, 0.16688, 1.86418, 364 },
//			new double[] { 0.2113, 0.18599, 1.94207, 356 },
//			new double[] { 0.21138, 0.18525, 1.93902, 356 },
//			new double[] { 0.21123, 0.18674, 1.94514, 356 },
//			new double[] { 0.21101, 0.189, 1.95444, 355 },
//			new double[] { 0.21116, 0.18749, 1.94822, 355 },
//			new double[] { 0.21108, 0.18824, 1.95132, 355 },
//			new double[] { 0.21079, 0.19128, 1.96384, 354 },
//			new double[] { 0.21086, 0.19052, 1.96069, 354 },
//			new double[] { 0.21094, 0.18976, 1.95756, 354 },
//			new double[] { 0.21057, 0.19358, 1.97336, 353 },
//			new double[] { 0.21064, 0.19281, 1.97018, 353 },
//			new double[] { 0.21072, 0.19205, 1.96701, 353 },
//			new double[] { 0.21035, 0.1959, 1.98297, 352 },
//			new double[] { 0.21042, 0.19513, 1.97976, 352 },
//			new double[] { 0.2105, 0.19436, 1.97656, 352 },
//			new double[] { 0.21028, 0.19668, 1.9862, 351 },
//			new double[] { 0.2096, 0.20372, 2.01553, 349 },
//			new double[] { 0.20968, 0.20293, 2.01224, 349 },
//			new double[] { 0.20953, 0.2045, 2.01881, 348 },
//			new double[] { 0.20891, 0.21077, 2.04516, 346 },
//			new double[] { 0.20883, 0.21155, 2.04846, 346 },
//			new double[] { 0.20875, 0.21233, 2.05176, 345 },
//			new double[] { 0.20859, 0.21389, 2.05834, 345 },
//			new double[] { 0.2085, 0.21466, 2.06163, 344 },
//			new double[] { 0.20842, 0.21544, 2.06491, 344 },
//			new double[] { 0.19814, 0.26081, 2.26394, 318 },
//			new double[] { 0.18838, 0.25298, 2.22859, 305 },
//			new double[] { 0.18866, 0.25352, 2.23103, 305 },
//			new double[] { 0.1881, 0.25242, 2.22606, 304 }

	};

//	public static Logger log = Logger.getLogger("FILE");

	public static void main(String[] args) throws InterruptedException {

		// log.info("sdcsdin");
		TreeMap<Integer, double[]> m = fillCmap(k);
		double[][] c = getCarr(m);

		Map<Integer, Set<Ind>> res = new HashMap<Integer, Set<Ind>>() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public String toString() {
				String ret = "";
				for (int t : keySet()) {
					ret += (t + "\tRM\t" + printSetR(t) + "\tRm\t"
							+ printSetr(t) + printSet(get(t)) + "\n");
				}
				return ret;
			}

			String printSet(Set<Ind> s) {
				String ret = "";
				for (Ind f : s) {
					ret += ("\tn\t" + f.getNf() + "\tx\t" + f.getXf() + "\t;\t");
				}
				return ret;
			}

			double printSetR(int y) {

				for (double[] f : k) {
					if (f[3] == y)
						return f[0];
				}
				return 0;
			}

			double printSetr(int y) {

				for (double[] f : k) {
					if (f[3] == y)
						return f[1];
				}
				return 0;
			}
		};

		while (c.length > 0) {
			Map<Integer, Set<Ind>> s_res = GA.start_try(c);
			res.putAll(s_res);

			m = fillCmap(c);
			for (int i : s_res.keySet())
				m.remove(i);
			c = getCarr(m);
			 System.out.println(res);
//			log.info(res);
//			log.info("-----------------------");

		}
		System.out.println(res);

	}

	private static double[][] getCarr(TreeMap<Integer, double[]> m) {
		double[][] c = new double[m.size()][];
		int i = 0;
		for (double[] t : m.values()) {
			c[i] = t;
			i++;
		}
		return c;
	}

	private static TreeMap<Integer, double[]> fillCmap(double[][] k) {
		TreeMap<Integer, double[]> m = new TreeMap<>();
		for (double[] t : k) {
			m.put((int) t[3], t);
		}
		return m;
	}

}
